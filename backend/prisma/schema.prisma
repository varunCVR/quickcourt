generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  OWNER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}

model User {
  id         String     @id @default(uuid())
  email      String     @unique
  password   String
  fullName   String
  avatar     String?
  role       Role       @default(USER)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  facilities Facility[] @relation("OwnerFacilities")
  bookings   Booking[]  @relation("UserBookings")
  matches    Match[]    @relation("MatchCreator")
  payments   Payment[]  @relation("UserPayments")
  playedMatches MatchPlayer[]
}

model Facility {
  id           String   @id @default(uuid())
  owner        User     @relation("OwnerFacilities", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId      String
  name         String
  description  String?
  addressLine1 String?
  addressLine2 String?
  city         String?
  state        String?
  postalCode   String?
  country      String?
  shortLocation String?
  rating       Float?   @default(0.0)
  sports       Json?
  amenities    Json?
  photos       Json?
  approved     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  latitude     Float?
  longitude    Float?

  courts       Court[]
}

model Court {
  id            String    @id @default(uuid())
  facility      Facility  @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  facilityId    String
  name          String
  sportType     String
  pricePerHour  Decimal   @db.Decimal(10, 2)
  currency      String    @default("INR")
  operatingHours Json?
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  bookings Booking[]
}

model Booking {
  id          String        @id @default(uuid())
  user        User          @relation("UserBookings", fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  court       Court         @relation(fields: [courtId], references: [id], onDelete: Cascade)
  courtId     String
  startTime   DateTime
  endTime     DateTime
  status      BookingStatus @default(PENDING)
  totalAmount Decimal       @db.Decimal(10, 2)
  currency    String        @default("INR")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  match       Match?        @relation("BookingMatch", fields: [matchId], references: [id])
  matchId     String?       @unique

  payment     Payment?

  @@index([courtId, startTime])
  @@index([userId, startTime])
}

model Match {
  id          String     @id @default(uuid())
  creator     User       @relation("MatchCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   String
  sportType   String
  maxPlayers  Int?
  description String?
  startsAt    DateTime?
  endsAt      DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  booking     Booking?   @relation("BookingMatch")
  players     MatchPlayer[]
}

model MatchPlayer {
  id       String  @id @default(uuid())
  match    Match   @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId  String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  joinedAt DateTime @default(now())

  @@unique([matchId, userId])
  @@index([matchId])
  @@index([userId])
}

model Payment {
  id                  String        @id @default(uuid())
  user                User          @relation("UserPayments", fields: [userId], references: [id], onDelete: Cascade)
  userId              String
  booking             Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId           String @unique
  amount              Decimal       @db.Decimal(10, 2)
  currency            String        @default("INR")
  status              PaymentStatus @default(PENDING)
  stripeTransactionId String?
  metadata            Json?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@index([bookingId])
  @@index([userId])
}
